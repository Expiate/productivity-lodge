import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from '../../../../environments/environment';
@Injectable({
  providedIn: 'root'
})

export class AuthService {
  private authUrl = `${environment.server_url}/users`;
  private loginUrl = '/login';
  private registerUrl = '/signup';
  private confirmUrl = '/signup/confirm';
  private resendEmailUrl = '/signup/confirm/resend';

  constructor(
    private http: HttpClient,
    ) {
  }

  /**
   * This Function takes the credentials of an user and passes them to the Backend
   * through an HTTP POST REQUEST and returns an Observable of the Response (LOGING)
   * 
   * @param credentials JSON that contains an Email and a Password
   * @returns Observable
   */
  login(credentials: { logEmail: string; logPass: string }) {
    console.log(`${this.authUrl}${this.loginUrl}`);
    let JSON = {
      'email': credentials.logEmail.toLowerCase(),
      'password': credentials.logPass
    }
    return this.http.post<any>(`${this.authUrl}${this.loginUrl}`, JSON, { observe: 'response' })
  }

  /**
   * This Function takes the credentials of an user and passes them to the Backend
   * through an HTTP POST REQUEST and returns an Observable of the Response (REGISTER)
   * 
   * @param credentials JSON that contains a Name, an Email and a Password
   * @returns Observable
   */
  register(credentials: { signName: string; signEmail: string; signPass: string }) {
    console.log(`${this.authUrl}${this.registerUrl}`);
    let JSON = {
      'username': credentials.signName,
      'email': credentials.signEmail.toLowerCase(),
      'password': credentials.signPass
    }
    console.log(JSON)
    return this.http.post<any>(`${this.authUrl}${this.registerUrl}`, JSON, { observe: 'response' })
  }

  /**
   * This Function takes the AutoGenerated Token provided in the user email and passes it to
   * the Backend through an HTTP POST REQUEST and returns an Observable of the Response (VALIDATE USER)
   * 
   * @param token String
   * @returns Observable
   */
  confirm(token : { confCode: string }) {
    console.log(`${this.authUrl}${this.confirmUrl}`);
    let JSON = {
      'confirmationCode': token.confCode
    }
    console.log(JSON)
    return this.http.post<any>(`${this.authUrl}${this.confirmUrl}`, JSON, { observe: 'response' })
  }

  /**
   * This Function takes an email in JSON and sends it to the Backend to send a confirmation email
   * 
   * @param email 
   * @returns Observable
   */
  resendConfirmationEmail(email) {
    console.log(`${this.authUrl}${this.resendEmailUrl}`)
    console.log(email)
    return this.http.post<any>(`${this.authUrl}${this.resendEmailUrl}`, email, { observe: 'response' })
  }

}
